// ВНИМАНИЕ - ПРИНЯЛИ 1 2 4 5 !!!!!!!!!!!!!!!!!! НЕ КОПИРОВАТЬ 5 И 6 ВООБЩЕ.
// upd: 6 и 9 короче не работает нормально и фиксить буду не скоро

#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <fstream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <Windows.h>
#include <stdlib.h>

HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); // а это для цвета консоли

std::string circle_calc(double radius)
{
	std::string result;
	double result_calc = 0;
	if (radius > 0)
	{
		result_calc = pi * pow(radius, 2);
		result = std::to_string(result_calc);
	}
	else
	{
		std::cout << "Cannot calculate.\b\n";
	}
	return result;
}
std::string triangle_calc(double a, double b, double h, double degree)
{
	// условия = 180 градусов, прямой = 1 угол = 90, острый = один угол <90, тупой = один угол >90;
	// для прямого, формула a*b/2
	// для острого a*h/2
	// для тупого a*h/2
	std::string result;
	double result_calc = 0;
	double temp = a * sin(degree);
	if (a > 0 and h > 0 and b > 0 and degree <= 180 and degree > 0 && temp == h)
	{
		if (degree == 90)
		{
			result_calc = a * b / 2;
			result = std::to_string(result_calc);
		}
		else if (180 > degree > 0)
		{
			result_calc = a * h / 2;
			result = std::to_string(result_calc);
		}
	}
	else
	{
		std::cout << "Cannot calculate.\b\n";
	}
	return result;
}
std::string rectangle_calc(double a, double b)
{
	std::string result;
	double result_calc = 0;
	if (a > 0 and b > 0)
	{
		result_calc = a * b;
		result = std::to_string(result_calc);
	}
	else
	{
		std::cout << "Cannot calculate.\b\n";
	}
	return result;
}
std::string sign_x(int n) // подпрограмма для задания 2
{
	std::string na;
	if (n > 0)
	{
		na = "1";
	}
	else if (n == 0)
	{
		na = '0';
	}
	else
	{
		na = "-1";
	}
	return na;
}

void task4_1()
{
	bool alert = false;
	std::ofstream file("file.txt");
	std::cout << "           If user inputs '0', the script will stop gaining numbers and calculate your result.\b\n\n           Do not enter anything above over 2^31!\n";
	int array[999]{};
	int calc_buffer = 0;
	int userinput;
	int check = 1;
	for (int n = 0; check != 0; n++)
	{
		std::cout << "-> "; std::cin >> userinput;
		if (userinput >= 2147483647 || userinput <= -858993460) // крч это чтобы сама прога не ломалась. я поизучал что будет если ввести число выше 2^31 и оно выводило эти два числа. этот скрипт - предохранитель, если пользователь ******* и воооот. прога вырубится
		{
			exit(0); 
		}
		else
		{
			array[n] = userinput;
			array[n + 1] = '\0';
			calc_buffer++;
		}
		if (userinput == 0)
		{
			check = 0;
			break;
		}
	}
	for (int i = 0; calc_buffer != 0; i++)
	{
		file << array[i] << " ";
		calc_buffer--;
	}
	file.close(); // пользователь закончил записывать числа 

	std::vector<int> num_buffer; // за вектора наорут так что парни НАЙДИТЕ ДРУГОЙ СПОСОБ :D ВАС СРАЗУ СПАЛЯТ 
	int summ = 0;
	std::ifstream ifile("file.txt");
	if (ifile.good()) // через open не робит :>
	{
		int current = 0;
		while (ifile >> current)
		{
			num_buffer.push_back(current); // push_back добавляет ячейку в конец вектора num_buffer, после current
		}
		ifile.close();
		for (int i = 0; i < num_buffer.size(); i++)
		{
			//std::cout << num_buffer[i] << " "; debug, вывести из файла
			summ += num_buffer[i];
		}
		std::cout << std::endl;
	}
	else
	{
		std::cout << "Error" << std::endl;
	}
	SetConsoleTextAttribute(hConsole, 7); // перекрас консоли
	std::cout << "Result: " << summ << std::endl;
}
void task4_2()
{
	std::cout << "              Please enter any number.\b\n\n     If your number is over 0, result will be 1.\b\n\n    If your number is lesser 0, result will be -1\b\n\n       If your number is 0, result will be 0\b\n\n";
	int n;
	std::string result;

	std::cout << "-> "; std::cin >> n; std::cout << std::endl;
	std::string x = sign_x(n);
	result = x;
	SetConsoleTextAttribute(hConsole, 7); // перекрас консоли
	std::cout << "Result: " << result << "\n";
}
void task4_3()
{
	std::string selector;
	double a, b, radius, h, degree;
	std::string resulter;

	std::cout << "Please enter the name of a shape.\b\n Shapes available are:\b\n\n Circle\b\n Rectangle\b\n Triangle\b\n";
	std::cout << "-> "; std::getline(std::cin, selector);

	std::transform(selector.begin(), selector.end(), selector.begin(),  // я как понял, через алгоритм transform мы начинаем с первого символа selector, идём до конца и обратно в начало
		[](unsigned char c)
		{
			return std::tolower(c);
		});
	// сразу признаюсь, взял из stackoverflow. вставляем новые данные о строчным selector в c и возвращаем это значение в selector?
	if (selector == "rectangle") // это чисто чтоб пользователь мог ввести фигуру как слово, а не цифру. не знаю зачем я это делал но было весело и я уверен что это плохой метод решения этой проблемы
	{
		std::cout << "You have selected: rectangle.\b\n Please enter width and length value.\b\n";
		selector = '1';
	}
	else if (selector == "triangle")
	{
		std::cout << "You have selected: triangle.\b\n Please enter 2 cathetus, height and degrees value.\b\n";
		selector = '2';
	}
	else if (selector == "circle")
	{
		std::cout << "You have selected: circle.\b\n Please enter radius value.\b\n";
		selector = '3';
	}
	while (true)
	{
		switch (selector[0])
		{
		case '1':
			std::cout << "-> "; std::cin >> a; std::cout << "-> "; std::cin >> b;
			resulter = rectangle_calc(a, b);
			break;
		case '2':
			std::cout << "-> "; std::cin >> a; std::cout << "-> "; std::cin >> b; std::cout << "-> "; std::cin >> h; std::cout << "-> "; std::cin >> degree;
			resulter = triangle_calc(a, b, h, degree);
			break;
		case '3':
			std::cout << "-> "; std::cin >> radius;
			resulter = circle_calc(radius);
			break;
		default:
			limbo();
			break;
		}
		break;
	}
	std::cout << resulter;
}
void task4_4()
{
	char star = '*';
	char line = '_';
  for (int i = 0; i < 13; i++) // сколько строк
		{
			for (int j = 0; j < 39; j++) // сколько может быть символов в строке
			{
				if (i < 4 && j < 8) // условие для звёзд
				{
					SetConsoleTextAttribute(hConsole, 12); // перекрас консоли
					std::cout << star;
				}
				else // для линий
				{
					SetConsoleTextAttribute(hConsole, 9); // перекрас консоли
					std::cout << line;
				}
			}
			std::cout << std::endl; // отступать после цикла
}


// ВОТ ЭТО ВСЁ ЗАДАНИЕ 5 =) НЕ КОПИРУЙТЕ !!!!!!!!!! СДЕЛАЙТЕ КАК 4 НОМЕР ПРОШУ, НЕ СТОИТ ВОТ ЭТО ВСЁ НИЖЕ

int NUM = 100; // количество точек
LONG WINAPI WndProc(HWND, UINT, WPARAM, LPARAM); // WPARAM = WIDTH PARAMETER... LPARAM = LENGTH PARAMETER
double** x; // массив данных
// (двумерный массив, может содержать несколько рядов данных)
double** getData(int n)
{
	double** f;
	f = new double* [2];
	f[0] = new double[n];
	f[1] = new double[n];
	for (int i = 0; i < n; i++)
	{
		double x = (double)i * 0.1;
		f[0][i] = x;
		f[1][i] = sin(x);
	}
	return f;
}
// Функция рисования графика
void DrawGraph(HDC hdc, RECT rectClient,
	double** x, // массив данных
	int n, // количество точек
	int numrow = 1) // количество рядов данных (по умолчанию 1)
{
	double OffsetY, OffsetX;
	double MAX_X, MAX_Y;
	double ScaleX, ScaleY;
	double min, max;
	int height, width;
	int X, Y; // координаты в окне (в px)
	HPEN hpen;
	height = rectClient.bottom - rectClient.top;
	width = rectClient.right - rectClient.left;
	// Область допустимых значений X
	min = x[0][0];
	max = x[0][0];
	for (int i = 0; i < n; i++)
	{
		if (x[0][i] < min) min = x[0][i];
		if (x[0][i] > max) max = x[0][i];
	}
	// double temp = max - min;
	MAX_X = max - min; // отвечает за то чтобы синус распределялся по всему окну
	OffsetX = min * width / MAX_X; // смещение X
	ScaleX = (double)width / MAX_X; // масштабный коэффициент X
	// Область допустимых значений Y
	min = x[1][0];
	max = x[1][0];
	for (int i = 0; i < n; i++)
	{
		for (int j = 1; j <= numrow; j++)
		{
			if (x[j][i] < min) min = x[j][i];
			if (x[j][i] > max) max = x[j][i];
		}
	}
	int color = RGB(255, 255, 255); // белое перо
	MAX_Y = max - min; // отвечает за то чтобы синус распределялся по всему окну
	OffsetY = max * height / (MAX_Y); // смещение Y
	ScaleY = (double)height / MAX_Y; // масштабный коэффициент Y
	// Отрисовка осей координат
	hpen = CreatePen(PS_SOLID, 0, color); //  белая линия, я кстати так и не понял почему слева появляется большая линия по Y ... 28.10.2023 - баг найден, с.м. ниже
	SelectObject(hdc, hpen);
	MoveToEx(hdc, 0, OffsetY, 0); // перемещение в точку (0;OffsetY)
	LineTo(hdc, width, OffsetY); // рисование горизонтальной оси
	MoveToEx(hdc, OffsetX, 0, 0); // перемещение в точку (OffsetX;0)
	LineTo(hdc, OffsetX, 0); // рисование вертикальной оси (не "видна") ... 28.10.2023 - я сидел над этим сломанным скриптом очень долго, если вместо 0 поставить height, как и было, то программа выведет большую белую линию, которая очень мешает. при 0 оно её не выводит
	DeleteObject(hpen); // удаление белого пера
	// Отрисовка графика функции
	color = RGB(114, 137, 218); // чёрноватое перо
	for (int j = 1; j <= numrow; j++)
	{
		hpen = CreatePen(PS_SOLID, 1, color); // формирование пера 1px
		SelectObject(hdc, hpen);
		X = (int)(OffsetX + x[0][0] * ScaleX); // начальная точка графика
		Y = (int)(OffsetY - x[j][0] * ScaleY);
		MoveToEx(hdc, X, Y, 0); // перемещение в начальную точку
		for (int i = 0; i < n; i++)
		{
			X = OffsetX + x[0][i] * ScaleX;
			Y = OffsetY - x[j][i] * ScaleY;
			Sleep(10); // 28.10.2023 добавлено, чтобы график красиво выводился, обожаю эту функцию...
			LineTo(hdc, X, Y);
		}
		color = color << 8; // изменение цвета пера для следующего ряда
		DeleteObject(hpen); // удаление текущего пера
	}
}
// Главная функция КОТОРУЮ НАДО ЕЩЁ ВЫЗВАТЬ !!!!!!!!!!!!!!!!!!!!!!!
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	HWND hwnd;
	MSG msg;
	WNDCLASS w;
	x = getData(NUM); // задание исходны данных
	memset(&w, 0, sizeof(WNDCLASS));
	w.style = CS_HREDRAW | CS_VREDRAW;
	w.lpfnWndProc = (WNDPROC)WndProc;
	w.hInstance = hInstance;
	w.hbrBackground = CreateSolidBrush(RGB(40, 43, 48));
	w.lpszClassName = L"My Class";
	RegisterClass(&w);
	hwnd = CreateWindow(L"My Class", L"TASK 4_5",
		WS_OVERLAPPEDWINDOW,
		500, 300, 500, 380, NULL, NULL,
		hInstance, NULL);
	ShowWindow(hwnd, nCmdShow);
	UpdateWindow(hwnd);
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return msg.wParam;
}
// Оконная функция
LONG WINAPI WndProc(HWND hwnd, UINT Message, WPARAM wparam, LPARAM lparam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	switch (Message)
	{
	case WM_PAINT:
		hdc = BeginPaint(hwnd, &ps);
		DrawGraph(hdc, ps.rcPaint, x, NUM); // построение графика
		/* Вывод текста y = sin(x)
		SetTextColor(hdc, RGB(114, 137, 218)); // синий цвет букв
		TextOut(hdc, 0, 0, L"sin(x)", 7);
		EndPaint(hwnd, &ps); */
		// закомментил потому что плохо выводит. Почему тут фон белого цвета?
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hwnd, Message, wparam, lparam);
	}
	return 0;
}

void task4_5()
{
	script_start();
	std::cout << "\nPlease input a number length for executing the script. If you don't know what's best, enter 95 or 64.\n";
	std::cout << "-> "; std::cin >> NUM;
	std::cout << "\nPlease close the pop-up window.\n";
	WinMain(0, 0, 0, 1);
	system("CLS");
	cin_fixer();
	script_executed();
}

// ура 5 задание завершено шок...

int number_conv(char number)
{
	// I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, M = 1000
	// if number1 < number2 ; number2-number1 todo
	// не больше 1 вычитания todo
	// не больше 3 прибавлений todo
	switch (number)
	{
	case 'I':
	case 'i':
		return 1;
	case 'V':
	case 'v':
		return 5;
	case 'X':
	case 'x':
		return 10;
	case 'L':
	case 'l':
		return 50;
	case 'C':
	case 'c':
		return 100;
	case 'D':
	case 'd':
		return 500;
	case 'M':
	case 'm':
		return 1000;
	default:
		return 0;
	}
}


// ТУТ ВСЁ, 5 НОМЕР ЗАВЕРШЁН. СКОПИРУЙТЕ - СПАЛЯТ
/*void task4_6()
{
	std::cout << "\nError code 1: User number has more than 3 of row numbers.\nError code 2: User number is impossible to calculate.\nError code 3: User number is entered incorrectly.\n\nInput ROME NUMBER... It will be converted to the arabic numeral system.\b\n\n";
	int number_converted = 0;
	int buffer = 0;
	int next = 0;
	bool alert = false;
		std::string number;
	std::cout << "-> "; std::getline(std::cin, number);
	for (int j = 0; j < number.length(); j++)
	{
		if (j + 3 < number.length())
		{
			if (number[j] == number[j + 1] && number[j] == number[j + 2] && number[j] == number[j + 3])
			{
				std::cout << "Number does not exist... (error code 1)\n";
				script_executed();
				return;
			}
		}
		for (int k = j + 1; k < number.length(); k++)
		{
			if (number[k] == number[j])
			{
				alert = true;
			}
			if (number_conv(number[j]) == number_conv(number[j + 2]) && alert == true && number_conv(number[j]) < number_conv(number[k]))
			{
				std::cout << "Number does not exist... (error code 3)\n";
				script_executed();
				return;
			}
			if (alert == true && number_conv(number[j]) > number_conv(number[k]))
			{
				std::cout << "Number does not exist... (error code 2)\n";
				script_executed();
				return;
			}
			if (number[j] > number[k] && number[j] != number[j + 2])
			{
				std::cout << "Number does not exist... (error code 4)\n";
				script_executed();
				return;
			}

		}
	}
	for (int i = 0; i < number.length(); i++)
	{
		buffer = number_conv(number[i]);
		next = i + 1 < number.length() ? number_conv(number[i + 1]) : 0; // ? == if (then), : == else 
		number_converted = buffer < next ? number_converted - buffer : number_converted + buffer;
	}
	std::cout << "Result: " << number_converted << "\n";
}*/
void task4_7() // задание сделано странно, препод просит через рекурсионные функции. Но его приняли
{
	int m = 0, c = 0, inputlast;
	const int i = 3;
	const int i2 = 13849;

	bool num_switch = 0;
	printf("Enter 1 for values of: 37 3 64\nEnter 0 for values 25173 13849 65537\n");
	std::cout << "-> ";  std::cin >> num_switch;
	if (num_switch != 0)
	{
		m = 37; c = 64;
		int S[i + 1]{};
		S[0] = 0;
		for (int count = 1; count <= i; count++)
		{
			S[count] = ((m * S[count - 1] + i) % c);
		}
		printf("\nInput a number from 1 to 3 to get a random number: \n-> "); std::cin >> inputlast;
		if (inputlast <= 3 && inputlast >= 1)
		{
			std::cout << S[inputlast];
		}
		else
		{
			printf("Number does not exist in array.\n");
		}
	}
	else
	{
		m = 25173; c = 65537;
		int S2[i2 + 1]{};
		S2[0] = 0;
		for (int count = 1; count <= i2; count++)
		{
			S2[count] = ((m * S2[count - 1] + i) % c);
		}
		printf("\nInput a number from 1 to 13849 to get a random number: \n-> "); std::cin >> inputlast;
		if (inputlast <= 13849 && inputlast >= 1)
		{
			std::cout << S2[inputlast];
		}
		else
		{
			printf("Number does not exist in array.\n");
		}
	}

}
void task4_8()
{
	script_start();
	double array1[3][4]={ {5, 2, 0, 10}, {3, 5, 2, 5}, {20, 0, 0, 0} };
	double array2[4][2]={ {1.2, 0.5}, { 2.8, 0.4 }, { 5, 1 }, { 2, 1.5 } };
	double result[3][2]; // результат умножения матриц. по правилам матрица 3 4 и 4 2 при умножении станут 3 2
	for (int i = 0; i < 3; i++) // 3 из result[3][2]
	{
		for (int j = 0; j < 2; j++) // 2 из result[3][2]
		{
			double resinput = 0; // result input, ввод в массив выше
			for (int k = 0; k < 4; k++)
			{
				resinput += array1[i][k] * array2[k][j];
			}
			result[i][j] = resinput;
		}
	}

	int max_t = 0, min_t = 0, max_s = 0, min_s = 0;
	double summary = 0, tax = 0, answer5=0;

	for (int i = 0; i < 3; i++)
	{
		summary += result[i][0];
		tax += result[i][1];
		answer5 = tax + summary;
		if (result[i][0] > result[max_s][0])
		{
			max_s = i;
		}
		if (result[i][1] > result[max_t][1])
		{
			max_t = i;
		}
		if (result[i][2] < result[min_s][2])
		{
			min_s = i;
		}
		if (result[i][1] < result[min_t][1])
		{
			min_t = i;
		}
		// конец задания ток вывести осталось
	}

	std::string userinput;
	std::cout << "\nPlease enter 0 to print C.\n1: Most/Least money earned.\n2:Most/Least CMM cash.\n3: Overall money earned.\n4:Overall CMM.\n5: Overall cashflow.\n";
	while (true)
	{
		std::getline(std::cin, userinput);
		switch (userinput[0])
		{
		case '0':
			printf("C:\n");
			for (int i = 0; i < 3; i++)
			{
				for (int j = 0; j < 2; j++)
				{
					std::cout << result[i][j] << "\n";
				}
			}
			break;
		case '1':
			std::cout << "\nMax: " << max_s + 1 << "\nMin: " << min_s + 1 << "\n"; 
			break;
		case '2':
			std::cout << "\nMax: " << max_t + 1 << "\nMin: " << min_t + 1 << "\n";
			break;
		case '3':
			std::cout << "\nResult :" << summary << "\n";
			break;
		case '4':
			std::cout << "\nResult: " << tax << "\n";
			break;
		case '5':
			std::cout << "\nResult: " << answer5 << "\n";
			break;
		default:
			script_executed();
			return;
		}
	}
}
int x_to_dec(std::string number, int n_sys) // от пользователя нужно: число, система из которой переводится. dec = 10. из x в 10
{
	std::string str = "0123456789abcdef";
	char ch{};
	int result = 0;

	for (int i = 0; i < number.size(); i++)
	{
		ch = number[i];
		int value = str.find(tolower(ch));
		result += value * pow(n_sys, number.size() - i - 1);
	}
	return result;
}
std::string dec_to_new_x(int x2d_res, int n_new_sys) // от пользователя нужно только система счисления. из 10 в x. x2d_res = x to dec result, берётся из задания
{
	std::string str = "0123456789abcdef", result{};
	int temp = 0;

	while (x2d_res > 0)
	{
		x2d_res /= n_new_sys;
		temp = x2d_res % n_new_sys;
		result += str[temp];
	}
	return result;
}
void task4_9()
{
	std::string str = "0123456789abcdef";
	bool alert = false;
	char check_ch{}, ch{};
	std::string number = "0";
	int n_sys = 2, n_new_sys = 16; // для контекста 2 и 16 выставлено для собственного удобства. можете ставить 0

	printf("Please enter a number\n");
	std::cout << "-> "; std::cin >> number; //почему cin а не getline? getline забирает всю строку, а cin до пробела. у мат. чисел не бывает пробела
	printf("\nEnter your old numeral system and preferable numeral system. (From 2 to 16)\n");
	std::cout << "-> "; std::cin >> n_sys; std::cout << "-> "; std::cin >> n_new_sys;

	if (n_sys < 17 && n_sys > 1 && n_new_sys < 17 && n_new_sys > 1)
	{
		for (int i = 0; i < number.size(); i++)
		{
			bool check_alert = 0;
			check_ch = tolower(number[i]);
			if (str.find(check_ch) > 16 || str.find(check_ch) < 0)
			{
				check_alert = true;
			}
			if (check_alert == 1)
			{
				std::cout << "Cannot execute.";
				break;
			}
			else
			{
				int dec_sys = x_to_dec(number, n_sys);
				std::string exec_result;
				if (n_new_sys != 10)
				{
					exec_result = dec_to_new_x(dec_sys, n_new_sys);
					std::cout << "Result: " << exec_result;
				}
				else
				{
					std::cout << "Result: " << dec_sys;
				}
				break;
			}
		}
	}
	else
	{
		printf("Script cannot be executed.");
	}
}
